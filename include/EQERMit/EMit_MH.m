function [theta, x, lnw, lnk, lng_y, lnw_x, ind, accept] = EMit_MH(N, d, kernel, mit, GamMat, MH)
% sample N draws from mixture of t's mit and evaluate them on the kernel
% if MH = true then also perform independence MH on the drawn sample
% with mit as the candidate density
%
% input:
% N - lenght of the generated chain
% d - dimension of the distribution
% kernel - function which computes the kernel
% mit - mixture of t's
%
% output:
% theta - [Nxd] matrix of samples generated by the independence MH (or just drawm from mit)
% accept - acceptance rate in the independence MH
    resampl_on = false;
 
    if (N <= 2000)
        [theta, lnk, ~, x, lng_y, lnw_x] = fn_rmvgt_robust(N, mit, kernel, resampl_on, true);
    else
        theta = zeros(N, d);
         lnk = zeros(N,1);
        lng_y = zeros(N,1);
        lnw_x = zeros(N,1);
        for ii = 1:(N/1000)
            fprintf('Sampling ii = %i\n',ii)
            ind = (1:1000) + (ii-1)*1000; 
            if (ii == 1)
                [theta(ind,:), lnk(ind,:), ~, x, lng_y(ind,:), lnw_x(ind,:)] = fn_rmvgt_robust(1000, mit, kernel, resampl_on, true);      
                HP = size(x,2);
                x = [x; zeros(N - 1000, HP)];                
            else
                [theta(ind,:), lnk(ind,:), ~, x(ind,:), lng_y(ind,:), lnw_x(ind,:)] = fn_rmvgt_robust(1000, mit, kernel, resampl_on, true);                      
            end
        end
    end
    ind_real = ((imag(lnk)==0) & ~isnan(lnk));
    lnk(~ind_real) = -Inf;
    
    lnd = dmvgt(theta, mit, true, GamMat);
    lnw = lnk - lnd;
    lnw = lnw - max(lnw);
    
    if MH
        [ind, a] = fn_MH(lnw);
        accept = a/N;   
        
        theta = theta(ind,:);
        lnw = lnw(ind,:);
        lnk = lnk(ind,:);
        x = x(ind,:);
        lng_y = lng_y(ind,:);
        lnw_x = lnw_x(ind,:);       
    else 
        accept = 100;
        ind = 1:N;
    end     
end