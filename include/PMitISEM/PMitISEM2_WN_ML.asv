clear all
close all

%% Initialization
s = RandStream('mt19937ar','Seed',0);
RandStream.setGlobalStream(s); 

addpath(genpath('include/'));
plot_on = true;
save_on = false;

x_gam = (0:0.00001:50)' + 0.00001; 
GamMat = gamma(x_gam);

model = 'WN_ML';
algo = 'PMitISEM';

% Artificial, white noise data 
T = 10000;
y = randn(T,1); 
y = y - mean(y);

% sigma is the VARIANCE of the error term, i.e. y_t ~ NID(0, sigma)
sigma_init = 0.9;

% Control parameters for MitISEM (cont) and PMitiISEM (cont2)
cont2 = MitISEM_Control;
cont2.mit.dfnc = 5;
cont2.mit.N = 10000;
cont2.mit.iter_max = 5;
cont2.df.range = [1,10];

 
sim = 1;
N_sim = 20;

% Metropolis-Hastings for the parameters
M = 10000; % number of draws for preliminary and IS computations
BurnIn = 1000;

H = 10; % forecast horizon
p_bar = 0.01;
% d = H+1; % dimension of theta

VaR_pmit = zeros(N_sim,1);
ES_pmit = zeros(N_sim,1);
time_pmit = zeros(2,1);

%% BIG DRAW
name =  ['results/PMitISEM/',model,'_Direct_',num2str(p_bar),'_H',num2str(H),'_VaR_results_Nsim',num2str(N_sim),'.mat'];
load(name);
draw_hl = draw_hl(:,2:end);
[N,d] = size(draw_hl);
w_hl = ones(N,1);
kernel = @(xx) -0.5*(T*log(2*pi) + T*log(xx) + sum(y.^2)./xx);
lnk_hl = kernel(draw_hl);

%% PMIT ALL
% patial mixture - based on multidimensional stuctures with 4 mit fields
% mit_struct = struct('mu',[],'Sigma',[],'df',[],'p',[]);
% pmit_struct = struct('mu',cell(1,S),'Sigma',cell(1,S),'df',cell(1,S),'p',cell(1,S));

partition = 1:H;
S = length(partition);
d = H;

fn_const_X = @(xx) WN_const_X(a);
fn_input_X = @(xx) xx;


kernel_init = @(xx) -  MLtarget_WN_hl(xx, sigma2_mle, mean(VaR_direct));
kernel = @(xx)  MLtarget_WN_hl(xx, sigma2_mle, mean(VaR_direct));
 
CV_old = cont2.mit.CV_old;
CV_tol = cont2.mit.CV_tol;

draw0 = draw_hl;
w0 = w_hl;
lnk0 = lnk_hl; %kernel(draw0);


cont2.mit.iter_max = 3;
cont2.df.range = [1,20];
cont2.mit.Hmax = 10;
cont = cont2;

tic
% [pmit, CV_mix, CV, iter, pmit_step2, pmit_step3, pmit_adapt] = PMitISEM_debug(draw0, lnk0, w0, kernel, fn_const_X, partition, d, cont, GamMat);
[pmit, CV_mix, CV, iter, pmit_step2, pmit_step3, pmit_adapt] = PMitISEM2(draw0, lnk0, w0, kernel, fn_const_X, fn_input_X, partition, d, cont2, GamMat);
time_pmit(1,1) = time_pmit(1,1) + toc;

 if save_on
    name = ['results/PMitISEM/',model,'_',algo,'_',num2str(p_bar),'_H',num2str(H),'_VaR_results_Nsim',num2str(N_sim),'.mat'];
    save(name,'pmit','CV_mix','CV','iter')
 end
% load(name);

%% VaR with PMit
tic
for sim = 1:N_sim 
    fprintf('\nVaR IS iter: %d\n',sim);
    
    draw_opt = fn_p_rmvgt(M, pmit, d, partition, [], fn_const_X);  
    y_opt = sigma2_mle.*draw_opt;  
    PL = f_pl(sum(y_opt,2));
    kernel = @(xx) - 0.5*(log(2*pi) + xx.^2);

    lnk_opt = sum(kernel(draw_opt),2);
    lnd_opt = dmvgt(draw_opt, mit2, true, GamMat);
    w_opt = exp(lnk_opt - lnd_opt)/M;
    [PL, ind] = sort(PL);         
    w_opt = w_opt(ind,:);
    cum_w = cumsum(w_opt);
    ind_var = min(find(cum_w > p_bar))-1; 
    VaR_pmit(sim,1) = (PL(ind_var+1) + PL(ind_var))/2; % intrapolate
    ES = (w_opt(1:ind_var)/sum(w_opt(1:ind_var))).*PL(1:ind_var);
    ES_pmit(sim,1) = sum(ES(isfinite(ES)));   
    
    
    fprintf('IS 100*%4.2f%% VaR estimate: %6.4f (%s, %s). \n', p_bar, VaR_pmit(sim,1), model, algo);  
end
time_pmit(2,1) = toc/N_sim;



if save_on
    name = ['results/PMitISEM/',model,'_',algo,'_',num2str(p_bar),'_H',num2str(H),'_VaR_results_Nsim',num2str(N_sim),'.mat'];
    save(name,'pmit','CV_mix','CV','iter','VaR_pmit','ES_pmit','time_pmit','pmit_eff')
end

if plot_on
    Boxplot_PMitISEM(VaR_prelim,VaR_pmit,ES_prelim,ES_pmit,model,algo,H,N_sim,save_on);

    y_pmit = bsxfun(@times,draw_pmit(:,2:d),sqrt(draw_pmit(:,1)));  
    Plot_hor_pmit(y_pmit, y(end), mean(VaR_prelim),model,algo,save_on)

    Beta = Plot_beta(pmit,model,H,save_on,2); % the last parmeter: version==2 ==> plot only the second beta coefficient
end